=========== GO EZMQ guide ==========

############ Pre-requisite for building EZMQ SDK ############

 (I) GO installation to build EZMQ SDK. [Version used for EZMQ is go1.9]
     Follow the instruction given at: https://golang.org/doc/install

     Guide to set ENV variables:
     (a) Open profile file:
         $vi ~/.profile
     (b) Add below lines:
         export PATH=$PATH:/usr/local/go/bin
         export GOPATH=$HOME/go
         export PATH=$PATH:$GOPATH/bin
     (c) Save and close

 (II) Install ZeroMQ go binding:
      (a) Install libzmq cpp library:
          (i) echo "deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./" >> /etc/apt/sources.list
              Note: If permission denied error comes in this step, Follow the below instructions:
                    - Goto /etc/apt/sources.list
                    - Add the below line:
                      deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./
                    - Save and close it.
         (ii)  wget -q https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key  -O- | sudo apt-key add -
         (iii) sudo apt-get install libzmq3-dev

         Above instructions are given at: http://zeromq.org/intro:get-the-software

      (b) $ go get github.com/pebbe/zmq4
          For guide please refer: https://github.com/pebbe/zmq4

 (III) go protocol buffer [protobuf]:
       $ go get -u github.com/golang/protobuf/protoc-gen-go

 (IV)  go logger [zap]:
       $ go get -u go.uber.org/zap

############  Build instructions ############

(A)Using Linux command line:

1. Copy EZMQ go SDK [ ~/MessageFW/EZMQ/go ] to GO workspace:
   /home/{UserName}/go/src

   Note: Make sure three directories are there in /home/{UserName}/go folder: src, pkg and bin

2. Build & install EZMQ SDK:
   Goto: /home/{UserName}/go/src/go/ezmq

   $ go build
   $ go install

3. On successful build & install:
   - It will create a ezmq package [ezmq.a] in:
	 /home/{UserName}/go/pkg/{arch}/go

4. Build & Run the subscriber sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - Build subscriber sample:
     :- $ go build subscriber.go
     :- It will make a executable for subscriber sample in same directory.

   - Run the subscriber sample:
     $ ./subscriber

   - On successful running it will show following logs:
     EZMQ initialized
     [Initialize] Error code is: 0
     Enter 1 for General Event testing
     Enter 2 for Topic Based delivery

5. Build & Run the publisher sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - Build publisher sample:
     :- $ go build publisher.go
     :- It will make a executable for subscriber sample in same directory.

   - Run the publisher sample:
     $ ./publisher

   - On successful running it will show following logs:
     EZMQ initialized
     [Initialize] Error code is: 0
     Enter 1 for General Event testing
     Enter 2 for Topic Based delivery

############ Usage guide [For micro-services] ############

1. The micro-service which wants to use EZMQ GO SDK has to import ezmq package:
   - import go/ezmq

2. Refer EZMQ sample applications to use EZMQ SDK APIs. [~/EZMQ/go/samples]

############ Generating godoc for EZMQ SDK ############

1. After installing the EZMQ go SDK, godoc can be generated using following command:
   $ godoc -html go/ezmq  > ezmq.html

2. Open the ezmq.html in web browser.

Note: Refer guide for trying more options: https://godoc.org/golang.org/x/tools/cmd/godoc

############ Running static analyzer for EZMQ SDK ############

1. Goto: /home/{UserName}/go/src/go/ezmq

2. Run the below command:
   $ go tool vet -all .

@@@@@@@@ Pre-assumption for EZMQ GO SDK build for arm/arm64 architecture @@@@@@@@@@@@@@@

Linux machine, on which you are going to do cross compilation for arm and arm64 architecture,
you have built the EZMQ SDK for x86 or x86_64 architecture.
If not, please see the above sections for building and installing EZMQ SDK.

########## Build EZMQ SDK for arm architecture [Cross compile on ubuntu] ################

1. Install tool-chain for arm:
   - sudo apt-get install gcc-arm-linux-gnueabi
   - sudo apt-get install g++-arm-linux-gnueabi

2. Build and install zeroMQ [libzmq] for arm architecture:

(a) git clone https://github.com/zeromq/libzmq.git
(b) $ cd libzmq
(c) git checkout v4.2.2
(d) chmod 777 version.sh
(e) chmod 777 autogen.sh
(f) ./autogen.sh
(g) ./configure --host=arm-none-linux-gnueabi CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++
(h) make -j 4
(i) sudo make install
(j) sudo ldconfig

3. Goto: /home/{UserName}/go/src/go/ezmq

4. CGO_ENABLED=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ GOOS=linux GOARCH=arm go build

5. CGO_ENABLED=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ GOOS=linux GOARCH=arm go install

Note:
1. If you get permission issue in step 5:
    - Make a folder linux_arm in {GOROOT}/pkg/
    - Give all permissions to this folder:
      $ sudo chmod 777 linux_arm/

2. Update flags as per your installation directories.

!!!!!! Build & Run EZMQ samples !!!!!!!!

1. Subscriber sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - $ CGO_ENABLED=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ GOOS=linux GOARCH=arm go build subscriber.go
       :- It will make an arm executable for subscriber sample in same directory.

   - Run the subscriber sample: [It will run on arm machine only]
     $ ./subscriber

2. Publisher sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - $ CGO_ENABLED=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ GOOS=linux GOARCH=arm go build publisher.go
       :- It will make an arm executable for publisher sample in same directory.

   - Run the publisher sample:
     $ ./publisher

########## Build EZMQ SDK for arm64 architecture [Cross compile on ubuntu] ################

1. Install tool-chain for arm64:
   - sudo apt-get install gcc-aarch64-linux-gnu
   - sudo apt-get install g++-aarch64-linux-gnu

2. Build and Install zeroMQ [libzmq] for arm64 architecture:

(a) git clone https://github.com/zeromq/libzmq.git
(b) $ cd libzmq
(c) git checkout v4.2.2
(d) chmod 777 version.sh
(e) chmod 777 autogen.sh
(f) ./autogen.sh
(g) ./configure --host=aarch64-unknown-linux-gnu CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8
(h) make -j 4
(i) sudo make install
(j) sudo ldconfig

3. Goto: /home/{UserName}/go/src/go/ezmq

4. CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8 GOOS=linux GOARCH=arm64 go build

5. CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8 GOOS=linux GOARCH=arm64 go install

Note:
1. If you get permission issue in step 5:
    - Make a folder linux_arm64 in {GOROOT}/pkg/
    - Give all permissions to this folder:
      $ sudo chmod 777 linux_arm64/

2. Update flags as per your installation directories.

!!!!!! Build & Run EZMQ samples !!!!!!!!

1. Subscriber sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - $ CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8 GOOS=linux GOARCH=arm64 go build subscriber.go
       :- It will make an arm64 executable for subscriber sample in same directory.

   - Run the subscriber sample:
     $ ./subscriber

2. Publisher sample application:
   - Goto: /home/{UserName}/go/src/go/samples

   - $ CGO_ENABLED=1 CC=/usr/bin/aarch64-linux-gnu-gcc-4.8 CXX=/usr/bin/aarch64-linux-gnu-g++-4.8 GOOS=linux GOARCH=arm64 go build publisher.go
       :- It will make an arm64 executable for publisher sample in same directory.

   - Run the publisher sample:
     $ ./publisher